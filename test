#!/usr/bin/env bash
set -euox pipefail

./make

docker stop --time 7 storeys || true

docker run --name storeys --detach --rm \
    -e ONLINE_MODE=FALSE \
    -v $PWD/minecraft-server-test-data:/data:Z -e UID=0 -e GID=0 \
    -p 25565:25565 -p 8080:8080 -p 7070:7070 minecraft-storeys-maker

docker logs -f storeys &

RETRIES=90
if [ $(command -v podman) ]; then
  until docker healthcheck run storeys; do
    RETRIES=$(($RETRIES - 1))
      if [ $RETRIES -eq 0 ]; then
          echo "Minecraft container failed to become healthy, giving up now"
          exit 1
      fi
      sleep 1
  done
else
  until [[ $(docker inspect --format='{{json .State.Health.Status}}' storeys) =~ healthy ]]; do
    RETRIES=$(($RETRIES - 1))
      if [ $RETRIES -eq 0 ]; then
          echo "Minecraft container failed to become healthy, giving up now"
          exit 1
      fi
      sleep 1
  done
fi

docker run --network host --rm -v $PWD/test-mineflayer:/project:Z minecraft-storeys-maker-build bash -c "npm install && npm test"

# podman stop storeys

# Note that `-e UID=0 -e GID=0` makes `itzg/minecraft-server`'s processes run as `root`
# (instead of its default UID/GID `1000` which is hard-coded in its `setup-user.sh`),
# and that (somewhat counter intuitively) will actually run as your unprivileged user on the host,
# see https://github.com/itzg/docker-minecraft-server#running-as-alternate-usergroup-id
# and https://github.com/containers/podman/blob/v2.2.1/docs/tutorials/rootless_tutorial.md#using-volumes.

# TODO HOW-TO --userns keep-id
# NOT --uidmap=0:100000:65536 --uidmap=1000:100000:65536 --gidmap=1000:100000:65536 --gidmap=0:100000:65536
# NOT --userns=host --user=$(id -un):$(id -gn)
