// see also ../storeys/build.gradle

plugins {
    id 'com.github.johnrengelman.shadow' version '5.2.0'
}

dependencies {
    implementation project(':api')
    implementation(project(':storeys')) {
      // because this is already "shadowed" into the :storeys JAR
      exclude group: 'com.spotify', module: 'futures-extra'
      exclude group: 'ch.vorburger.minecraft.osgi', module: 'api'
    }
    implementation project(':scratch3')

    // compileOnly for what is "shadowed" into :storeys at runtime, but still needed at compile-time
    compileOnly 'ch.vorburger.minecraft.osgi:api:1.0.0'

    implementation 'commons-io:commons-io:2.11.0'
    implementation 'org.osgi:org.osgi.core:6.0.0'
    implementation 'ch.vorburger.exec:exec:3.1.3'

    implementation 'io.vertx:vertx-service-proxy:4.0.2'

    testCompile 'org.seleniumhq.selenium:selenium-java:3.141.59'
    testCompile('io.github.bonigarcia:webdrivermanager:4.3.1') {
      exclude group: 'commons-io'
      exclude group: 'commons-codec'
      exclude group: 'org.apache.commons', module: 'commons-compress'
    }
    testCompile project(':test-utils')
}

task runWithJavaExec(type: JavaExec) {
  group = "Execution"
  description = "Run the main class with JavaExecTask"
  classpath = sourceSets.test.runtimeClasspath
  main = "ch.vorburger.minecraft.storeys.web.SeleniumTest"
  standardInput = System.in
}

shadowJar {
  // Relocate shaded Netty dependency, because Minecraft Server uses (a very OLD version of!) Netty itself
  // causing java.lang.NoSuchMethodError: io.netty.util.NetUtil.isIpV4StackPreferred()Z at io.netty.resolver.dns.DnsNameResolver.<clinit>(DnsNameResolver.java:103)
  relocate 'io.netty', 'ch.vorburger.relocated.io.netty'

  // Exclude the Sponge Plugin class of our base (non-web) project, because our StoreysWebPlugin class also extends the AbstractStoreysPlugin
  exclude 'ch/vorburger/minecraft/storeys/plugin/StoreysPlugin.class'

  dependencies {
    // https://imperceptiblethoughts.com/shadow/configuration/filtering/
    // NB "not being able to filter entire transitive dependency graphs"
    // so instead of using exclude dependency we just do explicit include:
    include(project(':api'))
    include(project(':storeys'))
    include(project(':scratch3'))
    include(dependency("io.vertx:vertx-core"))
    include(dependency("io.vertx:vertx-web"))
    include(dependency("io.vertx:vertx-web-common"))
    include(dependency("io.vertx:vertx-auth-common"))
    include(dependency("io.vertx:vertx-jwt"))
    include(dependency("io.vertx:vertx-auth-jwt"))
    include(dependency("io.vertx:vertx-bridge-common"))
    include(dependency("io.vertx:vertx-service-proxy"))
    // having to repeat all of Vert.x's Netty dependencies here feel stupid,
    // but there doesn't seem to be an easier way; the alternative would be
    // to instead of include only use exclude of all of spongepowered's libs.
    include(dependency("io.netty:netty-common"))
    include(dependency("io.netty:netty-buffer"))
    include(dependency("io.netty:netty-transport"))
    include(dependency("io.netty:netty-resolver"))
    include(dependency("io.netty:netty-resolver-dns"))
    include(dependency("io.netty:netty-handler"))
    include(dependency("io.netty:netty-handler-proxy"))
    include(dependency("io.netty:netty-codec"))
    include(dependency("io.netty:netty-codec-dns"))
    include(dependency("io.netty:netty-codec-socks"))
    include(dependency("io.netty:netty-codec-http"))
    include(dependency("io.netty:netty-codec-http2"))
    include(dependency("com.fasterxml.jackson.core:jackson-core"))
    exclude 'module-info.class'

    // vorburger's exec and all it's transitive dependencies
    include(dependency("ch.vorburger.exec:exec"))
    include(dependency("org.apache.commons:commons-exec"))
    include(dependency("org.apache.commons:commons-collections4"))
  }
}

artifacts {
    shadowJar;
}

assemble.dependsOn(shadowJar);
